name: Test
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  test:
    strategy:
      matrix:
        go-version: [1.18]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build          # ubuntu-latest
            ~/Library/Caches/go-build  # macos-latest
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download dependencies
        run: go mod download
      - name: Test
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            go test -v -timeout 5m -coverpkg=./... -coverprofile=coverage.tmp.txt -covermode=atomic ./...
            grep -v -E ".pb.go|_mock.go" coverage.tmp.txt > coverage.txt
          else
            go test -v -timeout 2m ./...
          fi
        shell: bash
        env:
          HOTSTUFF_LOG: info
      - name: Run docker tests
        if: runner.os == 'Linux'
        run: |
          cd scripts
          bash deploy_test.sh
      - name: Upload code coverage report
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.txt
          flags: unittests
